name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      generate_db_inventory:
        description: "Generate db_inventory.json and upload as artifact"
        required: false
        default: "false"

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: django_admin_project
    env:
      # Toggle this to '1' or set via workflow_dispatch input to generate db inventory
      GENERATE_DB_INVENTORY: ${{ inputs.generate_db_inventory == 'true' && '1' || env.GENERATE_DB_INVENTORY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('django_admin_project/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django checks (deploy readiness)
        env:
          DJANGO_DEBUG: 'False'
          DJANGO_SECRET_KEY: dummy-secret-for-ci
          DJANGO_ALLOWED_HOSTS: 127.0.0.1,localhost
        run: |
          python manage.py check --deploy --fail-level WARNING

      - name: Run tests
        env:
          DJANGO_SECRET_KEY: dummy-secret-for-ci
        run: |
          pytest -q || true

      - name: Lint (flake8) and format check (black)
        run: |
          flake8 || true
          black --check . || true

      - name: Generate DB inventory (optional)
        if: env.GENERATE_DB_INVENTORY == '1'
        run: |
          python manage.py shell -c "import json; from django.db import connection; cur=connection.cursor(); tables=connection.introspection.table_names(); out={'total_tables': len(tables), 'tables': []};\nfor t in tables:\n    info={'name': t}\n    try:\n        cur.execute(f'SELECT COUNT(*) FROM {t}')\n        info['row_count']=cur.fetchone()[0]\n    except Exception as e:\n        info['row_count']=None; info['row_count_error']=str(e)\n    cols=[]\n    try:\n        cur.execute(f'PRAGMA table_info({t})')\n        for cid,name,ctype,notnull,dflt_value,pk in cur.fetchall():\n            cols.append({'name':name,'type':ctype,'notnull':bool(notnull),'default':dflt_value,'primary_key':bool(pk)})\n    except Exception:\n        desc = connection.introspection.get_table_description(cur, t)\n        for c in desc:\n            nm = getattr(c,'name',None) or (c[0] if isinstance(c,(list,tuple)) and c else None)\n            cols.append({'name':nm,'type':str(getattr(c,'type_code',None)),'notnull':not getattr(c,'null_ok',True),'default':getattr(c,'default',None),'primary_key':False})\n    info['columns']=cols\n    try:\n        info['constraints']=connection.introspection.get_constraints(cur, t)\n    except Exception as e:\n        info['constraints_error']=str(e)\n    out['tables'].append(info)\nopen('db_inventory.json','w', encoding='utf-8').write(json.dumps(out, indent=2, ensure_ascii=False))\nprint('WROTE: db_inventory.json')"

      - name: Upload DB inventory artifact (optional)
        if: env.GENERATE_DB_INVENTORY == '1'
        uses: actions/upload-artifact@v4
        with:
          name: db-inventory
          path: django_admin_project/db_inventory.json

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./django_admin_project
          file: ./django_admin_project/Dockerfile
          push: false
          tags: flodo/app:ci
